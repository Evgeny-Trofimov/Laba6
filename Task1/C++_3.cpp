#include <iostream>   
#include <vector>     
#include <climits>    

using namespace std;  

int main() {
    // Инициализация матрицы 3x3 с тестовыми значениями
    vector<vector<int>> matrix = {
        {5, 2, 3},  
        {1, 4, 6},  
        {9, 8, 7}   
    };

    // Вывод заголовка матрицы
    cout << "Матрица:\n";
    // Цикл по строкам матрицы
    for (auto& row : matrix) {
        // Цикл по элементам строки
        for (int val : row) {
            // Вывод текущего элемента с пробелом
            cout << val << " ";
        }
        // Переход на новую строку после вывода всех элементов строки
        cout << "\n";
    }

    // Создание вектора для хранения результатов поиска
    vector<int> result;
    
    // Поиск элементов, минимальных в строке и максимальных в столбце
    for (int i = 0; i < matrix.size(); ++i) {
        // Инициализация переменных для поиска минимума в строке
        int min_val = INT_MAX;  // Начальное значение - максимально возможное целое
        int col_index = 0;      // Индекс столбца с минимальным значением
        
        // Поиск минимального элемента в текущей строке
        for (int j = 0; j < matrix[i].size(); ++j) {
            // Если текущий элемент меньше найденного минимума
            if (matrix[i][j] < min_val) {
                min_val = matrix[i][j];  // Обновляем минимальное значение
                col_index = j;           // Запоминаем индекс столбца
            }
        }

        // Проверка, является ли найденный элемент максимальным в своем столбце
        bool is_max = true;  // Флаг максимальности
        // Проверка всех элементов в столбце
        for (int k = 0; k < matrix.size(); ++k) {
            // Если найден элемент больше нашего минимума
            if (matrix[k][col_index] > min_val) {
                is_max = false;  // Элемент не максимальный в столбце
                break;           // Прерываем проверку
            }
        }

        // Если элемент минимальный в строке и максимальный в столбце
        if (is_max) {
            result.push_back(min_val);  // Добавляем элемент в результат
        }
    }

    // Вывод результатов поиска
    if (result.empty()) {
        // Если не найдено ни одного подходящего элемента
        cout << "Таких элементов нет.\n";
    } else {
        // Вывод найденных элементов
        cout << "Найденные элементы: ";
        // Цикл по всем найденным элементам
        for (int num : result) {
            cout << num << " ";  // Вывод элемента с пробелом
        }
        cout << "\n";  // Переход на новую строку
    }

    return 0;  
}
